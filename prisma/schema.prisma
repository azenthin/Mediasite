// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String
  displayName String?
  avatarUrl   String?
  emailVerified Boolean @default(false)
  emailVerificationToken String?
  emailVerificationExpires DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  media       Media[]
  playlists   Playlist[]
  aiPlaylists AIPlaylist[]
  likes       Like[]
  comments    Comment[]
  commentLikes CommentLike[]
  subscriptions Subscription[] @relation("Subscriber")
  subscribers  Subscription[] @relation("SubscribedTo")
  watchHistory WatchHistory[]
  analyticsEvents AnalyticsEvent[]
}

model Media {
  id          String    @id @default(cuid())
  title       String
  description String?
  url         String
  thumbnailUrl String?
  type        String    // "VIDEO", "IMAGE", or "AUDIO"
  category    String?
  tags        String    // JSON string
  duration    Int?      // in seconds
  isPublic    Boolean   @default(true)
  views       Int       @default(0)
  likes       Int       @default(0) // Count for quick access
  groupId     String?   // For grouping related media together
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  uploaderId  String
  uploader    User      @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  playlists   PlaylistMedia[]
  likeRecords Like[]
  comments    Comment[]
  watchHistory WatchHistory[]
  analyticsEvents AnalyticsEvent[]
  
  // Optimized indexes for common queries
  @@index([uploaderId, createdAt])
  @@index([type, isPublic, createdAt])
  @@index([category, isPublic, createdAt])
  @@index([createdAt(sort: Desc)])
  @@index([views(sort: Desc)])
  @@index([likes(sort: Desc)])
}

model Playlist {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  media       PlaylistMedia[]
}

model PlaylistMedia {
  id         String @id @default(cuid())
  order      Int
  addedAt    DateTime @default(now())

  // Relations
  playlistId String
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  mediaId    String
  media      Media   @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([playlistId, mediaId])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  mediaId   String
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([userId, mediaId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations - Using authorId field name that maps to userId column in database
  authorId  String   @map("userId")
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  mediaId   String
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  
  // Nested comments (replies)
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  
  // Comment likes
  likes     CommentLike[]
  
  // Counts
  counts    CommentCount?
  
  // Optimized indexes
  @@index([mediaId, createdAt])
  @@index([parentId, createdAt])
  @@index([authorId, createdAt])
}

model CommentLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model CommentCount {
  id        String   @id @default(cuid())
  likes     Int      @default(0)
  replies   Int      @default(0)
  
  // Relations
  commentId String   @unique
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Subscription {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  subscriberId String
  subscriber   User   @relation("Subscriber", fields: [subscriberId], references: [id], onDelete: Cascade)
  subscribedToId String
  subscribedTo User   @relation("SubscribedTo", fields: [subscribedToId], references: [id], onDelete: Cascade)

  @@unique([subscriberId, subscribedToId])
}

model WatchHistory {
  id        String   @id @default(cuid())
  watchedAt DateTime @default(now())
  progress  Float    @default(0) // 0-1, percentage watched

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  mediaId   String
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([userId, mediaId])
} 

// Lightweight analytics for tuning recommendations and UX
model AnalyticsEvent {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())

  // User/session context
  userId           String?
  sessionId        String

  // What was interacted with
  mediaId          String?
  uploaderId       String?

  // Event details
  eventType        String   // IMPRESSION, CLICK, START_PLAY, WATCHTIME, LIKE, DISLIKE, DISMISS, SUBSCRIBE
  position         Int?
  algorithmVersion String?
  score            Float?
  seed             String?
  meta             String? // JSON string

  // Optional relations (no cascading to avoid accidental wipes)
  user             User?    @relation(fields: [userId], references: [id])
  media            Media?   @relation(fields: [mediaId], references: [id])

  @@index([createdAt])
  @@index([eventType, createdAt])
  @@index([userId, createdAt])
}

// AI-generated music playlists (separate from media playlists)
model AIPlaylist {
  id          String   @id @default(cuid())
  name        String
  prompt      String   // The user's original prompt
  songs       String   // JSON array of {title, artist, genre?, mood?, year?}
  createdAt   DateTime @default(now())

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)])
}

// Song URL cache for reducing API calls to Spotify/YouTube
model SongCache {
  id           String   @id @default(cuid())
  
  // Song identifiers
  title        String
  artist       String
  spotifyId    String?  @unique // Spotify track ID
  isrc         String?  @unique // International Standard Recording Code
  
  // Platform URLs
  spotifyUrl   String?
  youtubeUrl   String?
  
  // Metadata
  album        String?
  year         Int?
  duration     Int?     // in seconds
  thumbnailUrl String?
  
  // Cache management
  hitCount     Int      @default(0)
  lastAccessed DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Compound indexes for fast lookups
  @@index([artist, title])
  @@index([lastAccessed])
  @@index([hitCount(sort: Desc)])
}