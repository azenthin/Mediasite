name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'

jobs:
  # Job 1: Run tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint || echo "Linting completed with warnings"
      
      - name: Run tests
        run: npm run test:ci
        env:
          NODE_ENV: test
      
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        if: success()
        with:
          files: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella

  # Job 2: Build check
  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          SKIP_ENV_VALIDATION: true
      
      - name: Check build size
        run: |
          echo "Build completed successfully"
          du -sh .next/ || echo "Build size check completed"

  # Job 3: Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Run security audit
        run: npm audit --audit-level=moderate || echo "Security audit completed with warnings"
      
      - name: Check for vulnerable dependencies
        run: |
          npm audit --json > audit-report.json || true
          echo "Security audit report generated"
      
      - name: Upload audit report
        uses: actions/upload-artifact@v3
        with:
          name: security-audit-report
          path: audit-report.json

  # Job 4: Type checking
  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run type check
        run: npx tsc --noEmit

  # Job 5: Deploy (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security, typecheck]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to Vercel
        run: |
          echo "Deploying to production..."
          # Add your deployment commands here
          # For Vercel: npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }}
          echo "Deployment would run here (configure with your deployment service)"
      
      - name: Notify deployment success
        if: success()
        run: echo "✅ Deployment successful!"
      
      - name: Notify deployment failure
        if: failure()
        run: echo "❌ Deployment failed!"

  # Job 6: Performance check (optional)
  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build for Lighthouse
        run: npm run build
        env:
          NODE_ENV: production
          SKIP_ENV_VALIDATION: true
      
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          echo "Lighthouse CI would run here"
          # lhci autorun --collect.url=http://localhost:3000
